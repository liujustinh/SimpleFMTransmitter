
SimpleFMTransmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000083a  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bb  00800114  00800114  000008e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fe4  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc4  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001110  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  0000486c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d3  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c1  00000000  00000000  00005507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	cf c2       	rjmp	.+1438   	; 0x5d4 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ff 00       	.word	0x00ff	; ????
  8e:	25 01       	movw	r4, r10
  90:	4b 01       	movw	r8, r22
  92:	71 01       	movw	r14, r2
  94:	97 01       	movw	r18, r14
  96:	bd 01       	movw	r22, r26
  98:	e3 01       	movw	r28, r6
  9a:	09 02       	muls	r16, r25
  9c:	ff 00       	.word	0x00ff	; ????

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ea e3       	ldi	r30, 0x3A	; 58
  b2:	f8 e0       	ldi	r31, 0x08	; 8
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 31       	cpi	r26, 0x14	; 20
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	23 e0       	ldi	r18, 0x03	; 3
  c6:	a4 e1       	ldi	r26, 0x14	; 20
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	af 3c       	cpi	r26, 0xCF	; 207
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	bb d2       	rcall	.+1398   	; 0x64c <main>
  d6:	af c3       	rjmp	.+1886   	; 0x836 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <SM1_Menu>:
					}
				}
			}	
		}
	}
}
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	92 07       	cpc	r25, r18
  e0:	21 f0       	breq	.+8      	; 0xea <SM1_Menu+0x10>
  e2:	34 f0       	brlt	.+12     	; 0xf0 <SM1_Menu+0x16>
  e4:	02 97       	sbiw	r24, 0x02	; 2
  e6:	3c f0       	brlt	.+14     	; 0xf6 <SM1_Menu+0x1c>
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <SM1_Menu+0x16>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	9f ef       	ldi	r25, 0xFF	; 255
  f4:	08 95       	ret
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <transmit_data>:
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	91 05       	cpc	r25, r1
 100:	09 f5       	brne	.+66     	; 0x144 <transmit_data+0x48>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	78 e0       	ldi	r23, 0x08	; 8
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	78 b9       	out	0x08, r23	; 8
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	af 01       	movw	r20, r30
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <transmit_data+0x1e>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <transmit_data+0x1a>
 11e:	46 23       	and	r20, r22
 120:	11 f0       	breq	.+4      	; 0x126 <transmit_data+0x2a>
 122:	81 60       	ori	r24, 0x01	; 1
 124:	01 c0       	rjmp	.+2      	; 0x128 <transmit_data+0x2c>
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	98 b1       	in	r25, 0x08	; 8
 12a:	89 2b       	or	r24, r25
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	41 9a       	sbi	0x08, 1	; 8
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	28 30       	cpi	r18, 0x08	; 8
 136:	31 05       	cpc	r19, r1
 138:	49 f7       	brne	.-46     	; 0x10c <transmit_data+0x10>
 13a:	42 9a       	sbi	0x08, 2	; 8
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	91 05       	cpc	r25, r1
 148:	01 f5       	brne	.+64     	; 0x18a <transmit_data+0x8e>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	50 e8       	ldi	r21, 0x80	; 128
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	58 b9       	out	0x08, r21	; 8
 156:	48 b1       	in	r20, 0x08	; 8
 158:	9f 01       	movw	r18, r30
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <transmit_data+0x66>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <transmit_data+0x62>
 166:	26 23       	and	r18, r22
 168:	19 f0       	breq	.+6      	; 0x170 <transmit_data+0x74>
 16a:	24 2f       	mov	r18, r20
 16c:	20 61       	ori	r18, 0x10	; 16
 16e:	02 c0       	rjmp	.+4      	; 0x174 <transmit_data+0x78>
 170:	24 2f       	mov	r18, r20
 172:	2f 7e       	andi	r18, 0xEF	; 239
 174:	28 b9       	out	0x08, r18	; 8
 176:	45 9a       	sbi	0x08, 5	; 8
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	91 05       	cpc	r25, r1
 17e:	51 f7       	brne	.-44     	; 0x154 <transmit_data+0x58>
 180:	46 9a       	sbi	0x08, 6	; 8
 182:	88 b1       	in	r24, 0x08	; 8
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	88 b9       	out	0x08, r24	; 8
 188:	08 95       	ret
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f9 f4       	brne	.+62     	; 0x1cc <transmit_data+0xd0>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	50 e8       	ldi	r21, 0x80	; 128
 194:	e1 e0       	ldi	r30, 0x01	; 1
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	52 b9       	out	0x02, r21	; 2
 19a:	42 b1       	in	r20, 0x02	; 2
 19c:	9f 01       	movw	r18, r30
 19e:	08 2e       	mov	r0, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <transmit_data+0xaa>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <transmit_data+0xa6>
 1aa:	26 23       	and	r18, r22
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <transmit_data+0xb8>
 1ae:	24 2f       	mov	r18, r20
 1b0:	20 61       	ori	r18, 0x10	; 16
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <transmit_data+0xbc>
 1b4:	24 2f       	mov	r18, r20
 1b6:	2f 7e       	andi	r18, 0xEF	; 239
 1b8:	22 b9       	out	0x02, r18	; 2
 1ba:	15 9a       	sbi	0x02, 5	; 2
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	91 05       	cpc	r25, r1
 1c2:	51 f7       	brne	.-44     	; 0x198 <transmit_data+0x9c>
 1c4:	16 9a       	sbi	0x02, 6	; 2
 1c6:	82 b1       	in	r24, 0x02	; 2
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	82 b9       	out	0x02, r24	; 2
 1cc:	08 95       	ret

000001ce <pulseLED>:
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	93 df       	rcall	.-218    	; 0xfc <transmit_data>
 1d6:	6f ef       	ldi	r22, 0xFF	; 255
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	8f df       	rcall	.-226    	; 0xfc <transmit_data>
 1de:	6f ef       	ldi	r22, 0xFF	; 255
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8b cf       	rjmp	.-234    	; 0xfc <transmit_data>
 1e6:	08 95       	ret

000001e8 <SM2_MatrixDisplay>:
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	89 30       	cpi	r24, 0x09	; 9
 1f0:	91 05       	cpc	r25, r1
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <SM2_MatrixDisplay+0xe>
 1f4:	34 c1       	rjmp	.+616    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 1f6:	8a 5b       	subi	r24, 0xBA	; 186
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	13 c3       	rjmp	.+1574   	; 0x824 <__tablejump2__>
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d1 e0       	ldi	r29, 0x01	; 1
 202:	e8 81       	ld	r30, Y
 204:	f9 81       	ldd	r31, Y+1	; 0x01
 206:	62 81       	ldd	r22, Z+2	; 0x02
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	77 df       	rcall	.-274    	; 0xfc <transmit_data>
 20e:	e8 81       	ld	r30, Y
 210:	f9 81       	ldd	r31, Y+1	; 0x01
 212:	61 81       	ldd	r22, Z+1	; 0x01
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	71 df       	rcall	.-286    	; 0xfc <transmit_data>
 21a:	6f ef       	ldi	r22, 0xFF	; 255
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	6d df       	rcall	.-294    	; 0xfc <transmit_data>
 222:	e8 81       	ld	r30, Y
 224:	f9 81       	ldd	r31, Y+1	; 0x01
 226:	62 81       	ldd	r22, Z+2	; 0x02
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	67 df       	rcall	.-306    	; 0xfc <transmit_data>
 22e:	e8 81       	ld	r30, Y
 230:	f9 81       	ldd	r31, Y+1	; 0x01
 232:	60 81       	ld	r22, Z
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	61 df       	rcall	.-318    	; 0xfc <transmit_data>
 23a:	6f ef       	ldi	r22, 0xFF	; 255
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	5d df       	rcall	.-326    	; 0xfc <transmit_data>
 242:	c5 df       	rcall	.-118    	; 0x1ce <pulseLED>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0c c1       	rjmp	.+536    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d1 e0       	ldi	r29, 0x01	; 1
 24e:	ea 81       	ldd	r30, Y+2	; 0x02
 250:	fb 81       	ldd	r31, Y+3	; 0x03
 252:	62 81       	ldd	r22, Z+2	; 0x02
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	51 df       	rcall	.-350    	; 0xfc <transmit_data>
 25a:	ea 81       	ldd	r30, Y+2	; 0x02
 25c:	fb 81       	ldd	r31, Y+3	; 0x03
 25e:	61 81       	ldd	r22, Z+1	; 0x01
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	4b df       	rcall	.-362    	; 0xfc <transmit_data>
 266:	6f ef       	ldi	r22, 0xFF	; 255
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	47 df       	rcall	.-370    	; 0xfc <transmit_data>
 26e:	ea 81       	ldd	r30, Y+2	; 0x02
 270:	fb 81       	ldd	r31, Y+3	; 0x03
 272:	62 81       	ldd	r22, Z+2	; 0x02
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	41 df       	rcall	.-382    	; 0xfc <transmit_data>
 27a:	ea 81       	ldd	r30, Y+2	; 0x02
 27c:	fb 81       	ldd	r31, Y+3	; 0x03
 27e:	60 81       	ld	r22, Z
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	3b df       	rcall	.-394    	; 0xfc <transmit_data>
 286:	6f ef       	ldi	r22, 0xFF	; 255
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	37 df       	rcall	.-402    	; 0xfc <transmit_data>
 28e:	9f df       	rcall	.-194    	; 0x1ce <pulseLED>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	e6 c0       	rjmp	.+460    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d1 e0       	ldi	r29, 0x01	; 1
 29a:	ec 81       	ldd	r30, Y+4	; 0x04
 29c:	fd 81       	ldd	r31, Y+5	; 0x05
 29e:	62 81       	ldd	r22, Z+2	; 0x02
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2b df       	rcall	.-426    	; 0xfc <transmit_data>
 2a6:	ec 81       	ldd	r30, Y+4	; 0x04
 2a8:	fd 81       	ldd	r31, Y+5	; 0x05
 2aa:	61 81       	ldd	r22, Z+1	; 0x01
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	25 df       	rcall	.-438    	; 0xfc <transmit_data>
 2b2:	6f ef       	ldi	r22, 0xFF	; 255
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	21 df       	rcall	.-446    	; 0xfc <transmit_data>
 2ba:	ec 81       	ldd	r30, Y+4	; 0x04
 2bc:	fd 81       	ldd	r31, Y+5	; 0x05
 2be:	62 81       	ldd	r22, Z+2	; 0x02
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	1b df       	rcall	.-458    	; 0xfc <transmit_data>
 2c6:	ec 81       	ldd	r30, Y+4	; 0x04
 2c8:	fd 81       	ldd	r31, Y+5	; 0x05
 2ca:	60 81       	ld	r22, Z
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	15 df       	rcall	.-470    	; 0xfc <transmit_data>
 2d2:	6f ef       	ldi	r22, 0xFF	; 255
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	11 df       	rcall	.-478    	; 0xfc <transmit_data>
 2da:	79 df       	rcall	.-270    	; 0x1ce <pulseLED>
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	c0 c0       	rjmp	.+384    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	d1 e0       	ldi	r29, 0x01	; 1
 2e6:	ee 81       	ldd	r30, Y+6	; 0x06
 2e8:	ff 81       	ldd	r31, Y+7	; 0x07
 2ea:	62 81       	ldd	r22, Z+2	; 0x02
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	05 df       	rcall	.-502    	; 0xfc <transmit_data>
 2f2:	ee 81       	ldd	r30, Y+6	; 0x06
 2f4:	ff 81       	ldd	r31, Y+7	; 0x07
 2f6:	61 81       	ldd	r22, Z+1	; 0x01
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	ff de       	rcall	.-514    	; 0xfc <transmit_data>
 2fe:	6f ef       	ldi	r22, 0xFF	; 255
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fb de       	rcall	.-522    	; 0xfc <transmit_data>
 306:	ee 81       	ldd	r30, Y+6	; 0x06
 308:	ff 81       	ldd	r31, Y+7	; 0x07
 30a:	62 81       	ldd	r22, Z+2	; 0x02
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	f5 de       	rcall	.-534    	; 0xfc <transmit_data>
 312:	ee 81       	ldd	r30, Y+6	; 0x06
 314:	ff 81       	ldd	r31, Y+7	; 0x07
 316:	60 81       	ld	r22, Z
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ef de       	rcall	.-546    	; 0xfc <transmit_data>
 31e:	6f ef       	ldi	r22, 0xFF	; 255
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	eb de       	rcall	.-554    	; 0xfc <transmit_data>
 326:	53 df       	rcall	.-346    	; 0x1ce <pulseLED>
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	9a c0       	rjmp	.+308    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 32e:	c0 e0       	ldi	r28, 0x00	; 0
 330:	d1 e0       	ldi	r29, 0x01	; 1
 332:	e8 85       	ldd	r30, Y+8	; 0x08
 334:	f9 85       	ldd	r31, Y+9	; 0x09
 336:	62 81       	ldd	r22, Z+2	; 0x02
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	df de       	rcall	.-578    	; 0xfc <transmit_data>
 33e:	e8 85       	ldd	r30, Y+8	; 0x08
 340:	f9 85       	ldd	r31, Y+9	; 0x09
 342:	61 81       	ldd	r22, Z+1	; 0x01
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	d9 de       	rcall	.-590    	; 0xfc <transmit_data>
 34a:	6f ef       	ldi	r22, 0xFF	; 255
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	d5 de       	rcall	.-598    	; 0xfc <transmit_data>
 352:	e8 85       	ldd	r30, Y+8	; 0x08
 354:	f9 85       	ldd	r31, Y+9	; 0x09
 356:	62 81       	ldd	r22, Z+2	; 0x02
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	cf de       	rcall	.-610    	; 0xfc <transmit_data>
 35e:	e8 85       	ldd	r30, Y+8	; 0x08
 360:	f9 85       	ldd	r31, Y+9	; 0x09
 362:	60 81       	ld	r22, Z
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	c9 de       	rcall	.-622    	; 0xfc <transmit_data>
 36a:	6f ef       	ldi	r22, 0xFF	; 255
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	c5 de       	rcall	.-630    	; 0xfc <transmit_data>
 372:	2d df       	rcall	.-422    	; 0x1ce <pulseLED>
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	74 c0       	rjmp	.+232    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d1 e0       	ldi	r29, 0x01	; 1
 37e:	ea 85       	ldd	r30, Y+10	; 0x0a
 380:	fb 85       	ldd	r31, Y+11	; 0x0b
 382:	62 81       	ldd	r22, Z+2	; 0x02
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	b9 de       	rcall	.-654    	; 0xfc <transmit_data>
 38a:	ea 85       	ldd	r30, Y+10	; 0x0a
 38c:	fb 85       	ldd	r31, Y+11	; 0x0b
 38e:	61 81       	ldd	r22, Z+1	; 0x01
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	b3 de       	rcall	.-666    	; 0xfc <transmit_data>
 396:	6f ef       	ldi	r22, 0xFF	; 255
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	af de       	rcall	.-674    	; 0xfc <transmit_data>
 39e:	ea 85       	ldd	r30, Y+10	; 0x0a
 3a0:	fb 85       	ldd	r31, Y+11	; 0x0b
 3a2:	62 81       	ldd	r22, Z+2	; 0x02
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	a9 de       	rcall	.-686    	; 0xfc <transmit_data>
 3aa:	ea 85       	ldd	r30, Y+10	; 0x0a
 3ac:	fb 85       	ldd	r31, Y+11	; 0x0b
 3ae:	60 81       	ld	r22, Z
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	a3 de       	rcall	.-698    	; 0xfc <transmit_data>
 3b6:	6f ef       	ldi	r22, 0xFF	; 255
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	9f de       	rcall	.-706    	; 0xfc <transmit_data>
 3be:	07 df       	rcall	.-498    	; 0x1ce <pulseLED>
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	4e c0       	rjmp	.+156    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d1 e0       	ldi	r29, 0x01	; 1
 3ca:	ec 85       	ldd	r30, Y+12	; 0x0c
 3cc:	fd 85       	ldd	r31, Y+13	; 0x0d
 3ce:	62 81       	ldd	r22, Z+2	; 0x02
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	93 de       	rcall	.-730    	; 0xfc <transmit_data>
 3d6:	ec 85       	ldd	r30, Y+12	; 0x0c
 3d8:	fd 85       	ldd	r31, Y+13	; 0x0d
 3da:	61 81       	ldd	r22, Z+1	; 0x01
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	8d de       	rcall	.-742    	; 0xfc <transmit_data>
 3e2:	6f ef       	ldi	r22, 0xFF	; 255
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	89 de       	rcall	.-750    	; 0xfc <transmit_data>
 3ea:	ec 85       	ldd	r30, Y+12	; 0x0c
 3ec:	fd 85       	ldd	r31, Y+13	; 0x0d
 3ee:	62 81       	ldd	r22, Z+2	; 0x02
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	83 de       	rcall	.-762    	; 0xfc <transmit_data>
 3f6:	ec 85       	ldd	r30, Y+12	; 0x0c
 3f8:	fd 85       	ldd	r31, Y+13	; 0x0d
 3fa:	60 81       	ld	r22, Z
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	7d de       	rcall	.-774    	; 0xfc <transmit_data>
 402:	6f ef       	ldi	r22, 0xFF	; 255
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	79 de       	rcall	.-782    	; 0xfc <transmit_data>
 40a:	e1 de       	rcall	.-574    	; 0x1ce <pulseLED>
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	28 c0       	rjmp	.+80     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d1 e0       	ldi	r29, 0x01	; 1
 416:	ee 85       	ldd	r30, Y+14	; 0x0e
 418:	ff 85       	ldd	r31, Y+15	; 0x0f
 41a:	62 81       	ldd	r22, Z+2	; 0x02
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	6d de       	rcall	.-806    	; 0xfc <transmit_data>
 422:	ee 85       	ldd	r30, Y+14	; 0x0e
 424:	ff 85       	ldd	r31, Y+15	; 0x0f
 426:	61 81       	ldd	r22, Z+1	; 0x01
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	67 de       	rcall	.-818    	; 0xfc <transmit_data>
 42e:	6f ef       	ldi	r22, 0xFF	; 255
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	63 de       	rcall	.-826    	; 0xfc <transmit_data>
 436:	ee 85       	ldd	r30, Y+14	; 0x0e
 438:	ff 85       	ldd	r31, Y+15	; 0x0f
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	5d de       	rcall	.-838    	; 0xfc <transmit_data>
 442:	ee 85       	ldd	r30, Y+14	; 0x0e
 444:	ff 85       	ldd	r31, Y+15	; 0x0f
 446:	60 81       	ld	r22, Z
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	57 de       	rcall	.-850    	; 0xfc <transmit_data>
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	53 de       	rcall	.-858    	; 0xfc <transmit_data>
 456:	bb de       	rcall	.-650    	; 0x1ce <pulseLED>
 458:	87 e0       	ldi	r24, 0x07	; 7
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <ADC_init>:
 468:	ea e7       	ldi	r30, 0x7A	; 122
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	80 6e       	ori	r24, 0xE0	; 224
 470:	80 83       	st	Z, r24
 472:	ec e7       	ldi	r30, 0x7C	; 124
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 64       	ori	r24, 0x40	; 64
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret

0000047e <readADC>:
 47e:	ec e7       	ldi	r30, 0x7C	; 124
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	90 81       	ld	r25, Z
 484:	98 7f       	andi	r25, 0xF8	; 248
 486:	83 70       	andi	r24, 0x03	; 3
 488:	89 2b       	or	r24, r25
 48a:	80 83       	st	Z, r24
 48c:	8f e0       	ldi	r24, 0x0F	; 15
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	00 00       	nop
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	e9 f7       	brne	.-6      	; 0x490 <readADC+0x12>
 496:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 49a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 49e:	08 95       	ret

000004a0 <joys_tick>:
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	eb df       	rcall	.-42     	; 0x47e <readADC>
 4a8:	ec 01       	movw	r28, r24
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	e8 df       	rcall	.-48     	; 0x47e <readADC>
 4ae:	ce 35       	cpi	r28, 0x5E	; 94
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	d2 07       	cpc	r29, r18
 4b4:	98 f4       	brcc	.+38     	; 0x4dc <joys_tick+0x3c>
 4b6:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <down+0x1>
 4ba:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <down>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <right+0x1>
 4c6:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <right>
 4ca:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <left+0x1>
 4ce:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <left>
 4d2:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <up+0x1>
 4d6:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <up>
 4da:	44 c0       	rjmp	.+136    	; 0x564 <joys_tick+0xc4>
 4dc:	cb 38       	cpi	r28, 0x8B	; 139
 4de:	d2 40       	sbci	r29, 0x02	; 2
 4e0:	98 f0       	brcs	.+38     	; 0x508 <joys_tick+0x68>
 4e2:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <right+0x1>
 4e6:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <right>
 4ea:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <down+0x1>
 4ee:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <down>
 4f2:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <up+0x1>
 4f6:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <up>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <left+0x1>
 502:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <left>
 506:	2e c0       	rjmp	.+92     	; 0x564 <joys_tick+0xc4>
 508:	28 2f       	mov	r18, r24
 50a:	39 2f       	mov	r19, r25
 50c:	29 35       	cpi	r18, 0x59	; 89
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	38 07       	cpc	r19, r24
 512:	98 f0       	brcs	.+38     	; 0x53a <joys_tick+0x9a>
 514:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <left+0x1>
 518:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <left>
 51c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <right+0x1>
 520:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <right>
 524:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <down+0x1>
 528:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <down>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <up+0x1>
 534:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <up>
 538:	15 c0       	rjmp	.+42     	; 0x564 <joys_tick+0xc4>
 53a:	2a 3f       	cpi	r18, 0xFA	; 250
 53c:	31 05       	cpc	r19, r1
 53e:	90 f4       	brcc	.+36     	; 0x564 <joys_tick+0xc4>
 540:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <up+0x1>
 544:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <up>
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <down+0x1>
 550:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <down>
 554:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <left+0x1>
 558:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <left>
 55c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <right+0x1>
 560:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <right>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <TimerSet>:
 56a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_M>
 56e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_M+0x1>
 572:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_M+0x2>
 576:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_M+0x3>
 57a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <_avr_timer_cntcurr>
 57e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <_avr_timer_cntcurr+0x1>
 582:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_avr_timer_cntcurr+0x2>
 586:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <_avr_timer_cntcurr+0x3>
 58a:	08 95       	ret

0000058c <TimerOn>:
 58c:	8b e0       	ldi	r24, 0x0B	; 11
 58e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 592:	8d e7       	ldi	r24, 0x7D	; 125
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 59a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 5a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 5a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 5ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 5b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 5b4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 5b8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 5bc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 5c0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 5c4:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 5c8:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
 5cc:	8f b7       	in	r24, 0x3f	; 63
 5ce:	80 68       	ori	r24, 0x80	; 128
 5d0:	8f bf       	out	0x3f, r24	; 63
 5d2:	08 95       	ret

000005d4 <__vector_13>:
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_avr_timer_cntcurr>
 5ea:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_avr_timer_cntcurr+0x1>
 5ee:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x2>
 5f2:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x3>
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	a1 09       	sbc	r26, r1
 5fa:	b1 09       	sbc	r27, r1
 5fc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 600:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 604:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 608:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
 60c:	89 2b       	or	r24, r25
 60e:	8a 2b       	or	r24, r26
 610:	8b 2b       	or	r24, r27
 612:	99 f4       	brne	.+38     	; 0x63a <__vector_13+0x66>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TimerFlag>
 61a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 61e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 622:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 626:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 62a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 62e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 632:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 636:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
 63a:	bf 91       	pop	r27
 63c:	af 91       	pop	r26
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <main>:
	}
	return SM2_State;
}

int main(void)
{
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 d0       	rcall	.+0      	; 0x652 <main+0x6>
 652:	00 d0       	rcall	.+0      	; 0x654 <main+0x8>
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
    ADC_init();
 658:	07 df       	rcall	.-498    	; 0x468 <ADC_init>
    nokia_lcd_init();
 65a:	9d d0       	rcall	.+314    	; 0x796 <nokia_lcd_init>
    nokia_lcd_clear();
 65c:	d2 d0       	rcall	.+420    	; 0x802 <nokia_lcd_clear>
 65e:	af e1       	ldi	r26, 0x1F	; 31
	
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
	
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 660:	b1 e0       	ldi	r27, 0x01	; 1
 662:	ba 83       	std	Y+2, r27	; 0x02
 664:	a9 83       	std	Y+1, r26	; 0x01
 666:	e4 e1       	ldi	r30, 0x14	; 20
 668:	f1 e0       	ldi	r31, 0x01	; 1
 66a:	fc 83       	std	Y+4, r31	; 0x04
 66c:	eb 83       	std	Y+3, r30	; 0x03
 66e:	8f ef       	ldi	r24, 0xFF	; 255
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//task1
	task1.state = -1;//Task initial state.
 670:	8c 93       	st	X, r24
 672:	44 e6       	ldi	r20, 0x64	; 100
	task1.period = SMTick1_period;//Task Period.
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	11 96       	adiw	r26, 0x01	; 1
 67c:	4d 93       	st	X+, r20
 67e:	5d 93       	st	X+, r21
 680:	6d 93       	st	X+, r22
 682:	7c 93       	st	X, r23
 684:	14 97       	sbiw	r26, 0x04	; 4
 686:	15 96       	adiw	r26, 0x05	; 5
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 688:	4d 93       	st	X+, r20
 68a:	5d 93       	st	X+, r21
 68c:	6d 93       	st	X+, r22
 68e:	7c 93       	st	X, r23
 690:	18 97       	sbiw	r26, 0x08	; 8
 692:	2d e6       	ldi	r18, 0x6D	; 109
	task1.TickFct = &SM1_Menu;//Function pointer for the tick.
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	1a 96       	adiw	r26, 0x0a	; 10
 698:	3c 93       	st	X, r19
 69a:	2e 93       	st	-X, r18
 69c:	19 97       	sbiw	r26, 0x09	; 9
 69e:	80 83       	st	Z, r24
	
	//task2
	task2.state = -1;//Task initial state.
 6a0:	81 e0       	ldi	r24, 0x01	; 1
	task2.period = SMTick2_period;//Task Period.
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	81 83       	std	Z+1, r24	; 0x01
 6aa:	92 83       	std	Z+2, r25	; 0x02
 6ac:	a3 83       	std	Z+3, r26	; 0x03
 6ae:	b4 83       	std	Z+4, r27	; 0x04
 6b0:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 6b2:	96 83       	std	Z+6, r25	; 0x06
 6b4:	a7 83       	std	Z+7, r26	; 0x07
 6b6:	b0 87       	std	Z+8, r27	; 0x08
 6b8:	84 ef       	ldi	r24, 0xF4	; 244
	task2.TickFct = &SM2_MatrixDisplay;//Function pointer for the tick.
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	92 87       	std	Z+10, r25	; 0x0a
 6be:	81 87       	std	Z+9, r24	; 0x09
 6c0:	61 e0       	ldi	r22, 0x01	; 1
	
	TimerSet(GCD);
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	50 df       	rcall	.-352    	; 0x56a <TimerSet>
	TimerOn();
 6ca:	60 df       	rcall	.-320    	; 0x58c <TimerOn>
 6cc:	7e 01       	movw	r14, r28
 6ce:	85 e0       	ldi	r24, 0x05	; 5
 6d0:	e8 0e       	add	r14, r24
 6d2:	f1 1c       	adc	r15, r1
	
    while(1)
    {
		joys_tick(); 
 6d4:	e5 de       	rcall	.-566    	; 0x4a0 <joys_tick>
 6d6:	de 01       	movw	r26, r28
 6d8:	11 96       	adiw	r26, 0x01	; 1
 6da:	6d 01       	movw	r12, r26
 6dc:	f6 01       	movw	r30, r12
	    for ( int i = 0; i < numTasks; i++ ) {
		    if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 6de:	01 91       	ld	r16, Z+
 6e0:	11 91       	ld	r17, Z+
 6e2:	6f 01       	movw	r12, r30
 6e4:	d8 01       	movw	r26, r16
 6e6:	15 96       	adiw	r26, 0x05	; 5
 6e8:	4d 91       	ld	r20, X+
 6ea:	5d 91       	ld	r21, X+
 6ec:	6d 91       	ld	r22, X+
 6ee:	7c 91       	ld	r23, X
 6f0:	18 97       	sbiw	r26, 0x08	; 8
 6f2:	11 96       	adiw	r26, 0x01	; 1
 6f4:	8d 91       	ld	r24, X+
 6f6:	9d 91       	ld	r25, X+
 6f8:	0d 90       	ld	r0, X+
 6fa:	bc 91       	ld	r27, X
 6fc:	a0 2d       	mov	r26, r0
 6fe:	48 17       	cp	r20, r24
 700:	59 07       	cpc	r21, r25
 702:	6a 07       	cpc	r22, r26
 704:	7b 07       	cpc	r23, r27
 706:	81 f4       	brne	.+32     	; 0x728 <main+0xdc>
 708:	f8 01       	movw	r30, r16
			    tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 70a:	80 81       	ld	r24, Z
 70c:	01 84       	ldd	r0, Z+9	; 0x09
 70e:	f2 85       	ldd	r31, Z+10	; 0x0a
 710:	e0 2d       	mov	r30, r0
 712:	08 2e       	mov	r0, r24
 714:	00 0c       	add	r0, r0
 716:	99 0b       	sbc	r25, r25
 718:	09 95       	icall
 71a:	d8 01       	movw	r26, r16
 71c:	8c 93       	st	X, r24
 71e:	f8 01       	movw	r30, r16
			    tasks[i]->elapsedTime = 0;
 720:	15 82       	std	Z+5, r1	; 0x05
 722:	16 82       	std	Z+6, r1	; 0x06
 724:	17 82       	std	Z+7, r1	; 0x07
 726:	10 86       	std	Z+8, r1	; 0x08
 728:	f8 01       	movw	r30, r16
		    }
		    tasks[i]->elapsedTime += 1;
 72a:	85 81       	ldd	r24, Z+5	; 0x05
 72c:	96 81       	ldd	r25, Z+6	; 0x06
 72e:	a7 81       	ldd	r26, Z+7	; 0x07
 730:	b0 85       	ldd	r27, Z+8	; 0x08
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	a1 1d       	adc	r26, r1
 736:	b1 1d       	adc	r27, r1
 738:	85 83       	std	Z+5, r24	; 0x05
 73a:	96 83       	std	Z+6, r25	; 0x06
 73c:	a7 83       	std	Z+7, r26	; 0x07
 73e:	b0 87       	std	Z+8, r27	; 0x08
 740:	ce 14       	cp	r12, r14
	TimerOn();
	
    while(1)
    {
		joys_tick(); 
	    for ( int i = 0; i < numTasks; i++ ) {
 742:	df 04       	cpc	r13, r15
 744:	59 f6       	brne	.-106    	; 0x6dc <main+0x90>
 746:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TimerFlag>
			    tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
			    tasks[i]->elapsedTime = 0;
		    }
		    tasks[i]->elapsedTime += 1;
	    }
	    while(!TimerFlag);
 74a:	88 23       	and	r24, r24
 74c:	e1 f3       	breq	.-8      	; 0x746 <main+0xfa>
 74e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TimerFlag>
	    TimerFlag = 0;
 752:	c0 cf       	rjmp	.-128    	; 0x6d4 <main+0x88>

00000754 <write>:
 */
static void write(uint8_t bytes, uint8_t is_data)
{
	register uint8_t i;
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 754:	28 98       	cbi	0x05, 0	; 5

	/* We are sending data */
	if (is_data)
 756:	66 23       	and	r22, r22
 758:	11 f0       	breq	.+4      	; 0x75e <write+0xa>
		PORT_LCD |= (1 << LCD_DC);
 75a:	2a 9a       	sbi	0x05, 2	; 5
 75c:	15 c0       	rjmp	.+42     	; 0x788 <write+0x34>
	/* We are sending commands */
	else
		PORT_LCD &= ~(1 << LCD_DC);
 75e:	2a 98       	cbi	0x05, 2	; 5
 760:	13 c0       	rjmp	.+38     	; 0x788 <write+0x34>

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 762:	ac 01       	movw	r20, r24
 764:	02 2e       	mov	r0, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <write+0x18>
 768:	55 95       	asr	r21
 76a:	47 95       	ror	r20
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <write+0x14>
 770:	40 ff       	sbrs	r20, 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <write+0x24>
			PORT_LCD |= (1 << LCD_DIN);
 774:	2b 9a       	sbi	0x05, 3	; 5
 776:	01 c0       	rjmp	.+2      	; 0x77a <write+0x26>
		else
			PORT_LCD &= ~(1 << LCD_DIN);
 778:	2b 98       	cbi	0x05, 3	; 5

		/* Blink clock */
		PORT_LCD |= (1 << LCD_CLK);
 77a:	2c 9a       	sbi	0x05, 4	; 5
		PORT_LCD &= ~(1 << LCD_CLK);
 77c:	2c 98       	cbi	0x05, 4	; 5
 77e:	21 50       	subi	r18, 0x01	; 1
 780:	31 09       	sbc	r19, r1
 782:	78 f7       	brcc	.-34     	; 0x762 <write+0xe>
	}

	/* Disable controller */
	PORT_LCD |= (1 << LCD_SCE);
 784:	28 9a       	sbi	0x05, 0	; 5
}
 786:	08 95       	ret
 * Sending data to LCD
 * @bytes: data
 * @is_data: transfer mode: 1 - data; 0 - command;
 */
static void write(uint8_t bytes, uint8_t is_data)
{
 788:	27 e0       	ldi	r18, 0x07	; 7
 78a:	30 e0       	ldi	r19, 0x00	; 0
		PORT_LCD &= ~(1 << LCD_DC);

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	e9 cf       	rjmp	.-46     	; 0x762 <write+0xe>

00000790 <write_cmd>:
	PORT_LCD |= (1 << LCD_SCE);
}

static void write_cmd(uint8_t cmd)
{
	write(cmd, 0);
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	e0 cf       	rjmp	.-64     	; 0x754 <write>
 794:	08 95       	ret

00000796 <nokia_lcd_init>:
/*
 * Public functions
 */

void nokia_lcd_init(void)
{
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
	register unsigned i;
	/* Set pins as output */
	DDR_LCD |= (1 << LCD_SCE);
 79a:	20 9a       	sbi	0x04, 0	; 4
	DDR_LCD |= (1 << LCD_RST);
 79c:	21 9a       	sbi	0x04, 1	; 4
	DDR_LCD |= (1 << LCD_DC);
 79e:	22 9a       	sbi	0x04, 2	; 4
	DDR_LCD |= (1 << LCD_DIN);
 7a0:	23 9a       	sbi	0x04, 3	; 4
	DDR_LCD |= (1 << LCD_CLK);
 7a2:	24 9a       	sbi	0x04, 4	; 4

	/* Reset display */
	PORT_LCD |= (1 << LCD_RST);
 7a4:	29 9a       	sbi	0x05, 1	; 5
	PORT_LCD |= (1 << LCD_SCE);
 7a6:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a8:	83 ec       	ldi	r24, 0xC3	; 195
 7aa:	99 e0       	ldi	r25, 0x09	; 9
 7ac:	01 97       	sbiw	r24, 0x01	; 1
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <nokia_lcd_init+0x16>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <nokia_lcd_init+0x1c>
 7b2:	00 00       	nop
	_delay_ms(10);
	PORT_LCD &= ~(1 << LCD_RST);
 7b4:	29 98       	cbi	0x05, 1	; 5
 7b6:	8b e5       	ldi	r24, 0x5B	; 91
 7b8:	94 e4       	ldi	r25, 0x44	; 68
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <nokia_lcd_init+0x24>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <nokia_lcd_init+0x2a>
 7c0:	00 00       	nop
	_delay_ms(70);
	PORT_LCD |= (1 << LCD_RST);
 7c2:	29 9a       	sbi	0x05, 1	; 5

	/*
	 * Initialize display
	 */
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 7c4:	28 98       	cbi	0x05, 0	; 5
	/* -LCD Extended Commands mode- */
	write_cmd(0x21);
 7c6:	81 e2       	ldi	r24, 0x21	; 33
 7c8:	e3 df       	rcall	.-58     	; 0x790 <write_cmd>
	/* LCD bias mode 1:48 */
	write_cmd(0x13);
 7ca:	83 e1       	ldi	r24, 0x13	; 19
 7cc:	e1 df       	rcall	.-62     	; 0x790 <write_cmd>
	/* Set temperature coefficient */
	write_cmd(0x06);
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	df df       	rcall	.-66     	; 0x790 <write_cmd>
	/* Default VOP (3.06 + 66 * 0.06 = 7V) */
	write_cmd(0xC2);
 7d2:	82 ec       	ldi	r24, 0xC2	; 194
 7d4:	dd df       	rcall	.-70     	; 0x790 <write_cmd>
	/* Standard Commands mode, powered down */
	write_cmd(0x20);
 7d6:	80 e2       	ldi	r24, 0x20	; 32
 7d8:	db df       	rcall	.-74     	; 0x790 <write_cmd>
	/* LCD in normal mode */
	write_cmd(0x09);
 7da:	89 e0       	ldi	r24, 0x09	; 9
 7dc:	d9 df       	rcall	.-78     	; 0x790 <write_cmd>

	/* Clear LCD RAM */
	write_cmd(0x80);
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	d7 df       	rcall	.-82     	; 0x790 <write_cmd>
	write_cmd(LCD_CONTRAST);
 7e2:	80 e4       	ldi	r24, 0x40	; 64
 7e4:	d5 df       	rcall	.-86     	; 0x790 <write_cmd>
 7e6:	c8 ef       	ldi	r28, 0xF8	; 248
 7e8:	d1 e0       	ldi	r29, 0x01	; 1
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	b2 df       	rcall	.-156    	; 0x754 <write>
 7f0:	21 97       	sbiw	r28, 0x01	; 1
	write_cmd(0x09);

	/* Clear LCD RAM */
	write_cmd(0x80);
	write_cmd(LCD_CONTRAST);
	for (i = 0; i < 504; i++)
 7f2:	d9 f7       	brne	.-10     	; 0x7ea <nokia_lcd_init+0x54>
		write_data(0x00);

	/* Activate LCD */
	write_cmd(0x08);
 7f4:	88 e0       	ldi	r24, 0x08	; 8
 7f6:	cc df       	rcall	.-104    	; 0x790 <write_cmd>
 7f8:	8c e0       	ldi	r24, 0x0C	; 12
	write_cmd(0x0C);
 7fa:	ca df       	rcall	.-108    	; 0x790 <write_cmd>
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
}
 800:	08 95       	ret

00000802 <nokia_lcd_clear>:
 802:	80 e8       	ldi	r24, 0x80	; 128
 804:	c5 df       	rcall	.-118    	; 0x790 <write_cmd>
void nokia_lcd_clear(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);
 806:	80 e4       	ldi	r24, 0x40	; 64
 808:	c3 df       	rcall	.-122    	; 0x790 <write_cmd>
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
 80a:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = 0;
 80e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <nokia_lcd+0x1f9>
 812:	ef e2       	ldi	r30, 0x2F	; 47
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	87 e2       	ldi	r24, 0x27	; 39
 818:	93 e0       	ldi	r25, 0x03	; 3
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
		nokia_lcd.screen[i] = 0x00;
 81a:	11 92       	st	Z+, r1
	write_cmd(0x40);
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
	nokia_lcd.cursor_y = 0;
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
 81c:	e8 17       	cp	r30, r24
 81e:	f9 07       	cpc	r31, r25
 820:	e1 f7       	brne	.-8      	; 0x81a <nokia_lcd_clear+0x18>
		nokia_lcd.screen[i] = 0x00;
}
 822:	08 95       	ret

00000824 <__tablejump2__>:
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	00 24       	eor	r0, r0
 82a:	00 1c       	adc	r0, r0
 82c:	0b be       	out	0x3b, r0	; 59
 82e:	07 90       	elpm	r0, Z+
 830:	f6 91       	elpm	r31, Z
 832:	e0 2d       	mov	r30, r0
 834:	09 94       	ijmp

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>
